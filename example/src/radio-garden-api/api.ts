/* tslint:disable */
/* eslint-disable */
/**
 * Radio Garden
 * An unofficial specification of the [Radio Garden](https://radio.garden/) API.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AraContentChannelChannelIdGet200Response
 */
export interface AraContentChannelChannelIdGet200Response {
    /**
     * 
     * @type {number}
     * @memberof AraContentChannelChannelIdGet200Response
     */
    'apiVersion'?: number;
    /**
     * 
     * @type {string}
     * @memberof AraContentChannelChannelIdGet200Response
     */
    'version'?: string;
    /**
     * 
     * @type {Channel}
     * @memberof AraContentChannelChannelIdGet200Response
     */
    'data'?: Channel;
}
/**
 * 
 * @export
 * @interface AraContentChannelChannelIdGet200ResponseAllOf
 */
export interface AraContentChannelChannelIdGet200ResponseAllOf {
    /**
     * 
     * @type {Channel}
     * @memberof AraContentChannelChannelIdGet200ResponseAllOf
     */
    'data'?: Channel;
}
/**
 * 
 * @export
 * @interface AraContentPagePlaceIdChannelsGet200Response
 */
export interface AraContentPagePlaceIdChannelsGet200Response {
    /**
     * 
     * @type {number}
     * @memberof AraContentPagePlaceIdChannelsGet200Response
     */
    'apiVersion'?: number;
    /**
     * 
     * @type {string}
     * @memberof AraContentPagePlaceIdChannelsGet200Response
     */
    'version'?: string;
    /**
     * 
     * @type {AraContentPagePlaceIdChannelsGet200ResponseAllOfData}
     * @memberof AraContentPagePlaceIdChannelsGet200Response
     */
    'data'?: AraContentPagePlaceIdChannelsGet200ResponseAllOfData;
}
/**
 * 
 * @export
 * @interface AraContentPagePlaceIdChannelsGet200ResponseAllOf
 */
export interface AraContentPagePlaceIdChannelsGet200ResponseAllOf {
    /**
     * 
     * @type {AraContentPagePlaceIdChannelsGet200ResponseAllOfData}
     * @memberof AraContentPagePlaceIdChannelsGet200ResponseAllOf
     */
    'data'?: AraContentPagePlaceIdChannelsGet200ResponseAllOfData;
}
/**
 * 
 * @export
 * @interface AraContentPagePlaceIdChannelsGet200ResponseAllOfData
 */
export interface AraContentPagePlaceIdChannelsGet200ResponseAllOfData {
    /**
     * 
     * @type {string}
     * @memberof AraContentPagePlaceIdChannelsGet200ResponseAllOfData
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof AraContentPagePlaceIdChannelsGet200ResponseAllOfData
     */
    'subtitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof AraContentPagePlaceIdChannelsGet200ResponseAllOfData
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof AraContentPagePlaceIdChannelsGet200ResponseAllOfData
     */
    'map'?: string;
    /**
     * 
     * @type {number}
     * @memberof AraContentPagePlaceIdChannelsGet200ResponseAllOfData
     */
    'count'?: number;
    /**
     * 
     * @type {number}
     * @memberof AraContentPagePlaceIdChannelsGet200ResponseAllOfData
     */
    'utcOffset'?: number;
    /**
     * 
     * @type {Array<ChannelRefs>}
     * @memberof AraContentPagePlaceIdChannelsGet200ResponseAllOfData
     */
    'content'?: Array<ChannelRefs>;
}
/**
 * 
 * @export
 * @interface AraContentPagePlaceIdChannelsGet200ResponseAllOfDataAllOf
 */
export interface AraContentPagePlaceIdChannelsGet200ResponseAllOfDataAllOf {
    /**
     * 
     * @type {Array<ChannelRefs>}
     * @memberof AraContentPagePlaceIdChannelsGet200ResponseAllOfDataAllOf
     */
    'content'?: Array<ChannelRefs>;
}
/**
 * 
 * @export
 * @interface AraContentPagePlaceIdGet200Response
 */
export interface AraContentPagePlaceIdGet200Response {
    /**
     * 
     * @type {number}
     * @memberof AraContentPagePlaceIdGet200Response
     */
    'apiVersion'?: number;
    /**
     * 
     * @type {string}
     * @memberof AraContentPagePlaceIdGet200Response
     */
    'version'?: string;
    /**
     * 
     * @type {AraContentPagePlaceIdGet200ResponseAllOfData}
     * @memberof AraContentPagePlaceIdGet200Response
     */
    'data'?: AraContentPagePlaceIdGet200ResponseAllOfData;
}
/**
 * 
 * @export
 * @interface AraContentPagePlaceIdGet200ResponseAllOf
 */
export interface AraContentPagePlaceIdGet200ResponseAllOf {
    /**
     * 
     * @type {AraContentPagePlaceIdGet200ResponseAllOfData}
     * @memberof AraContentPagePlaceIdGet200ResponseAllOf
     */
    'data'?: AraContentPagePlaceIdGet200ResponseAllOfData;
}
/**
 * 
 * @export
 * @interface AraContentPagePlaceIdGet200ResponseAllOfData
 */
export interface AraContentPagePlaceIdGet200ResponseAllOfData {
    /**
     * 
     * @type {string}
     * @memberof AraContentPagePlaceIdGet200ResponseAllOfData
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof AraContentPagePlaceIdGet200ResponseAllOfData
     */
    'subtitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof AraContentPagePlaceIdGet200ResponseAllOfData
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof AraContentPagePlaceIdGet200ResponseAllOfData
     */
    'map'?: string;
    /**
     * 
     * @type {number}
     * @memberof AraContentPagePlaceIdGet200ResponseAllOfData
     */
    'count'?: number;
    /**
     * 
     * @type {number}
     * @memberof AraContentPagePlaceIdGet200ResponseAllOfData
     */
    'utcOffset'?: number;
    /**
     * 
     * @type {Array<PlaceContentContentInner>}
     * @memberof AraContentPagePlaceIdGet200ResponseAllOfData
     */
    'content'?: Array<PlaceContentContentInner>;
}
/**
 * 
 * @export
 * @interface AraContentPlacesGet200Response
 */
export interface AraContentPlacesGet200Response {
    /**
     * 
     * @type {number}
     * @memberof AraContentPlacesGet200Response
     */
    'apiVersion'?: number;
    /**
     * 
     * @type {string}
     * @memberof AraContentPlacesGet200Response
     */
    'version'?: string;
    /**
     * 
     * @type {AraContentPlacesGet200ResponseAllOfData}
     * @memberof AraContentPlacesGet200Response
     */
    'data'?: AraContentPlacesGet200ResponseAllOfData;
}
/**
 * 
 * @export
 * @interface AraContentPlacesGet200ResponseAllOf
 */
export interface AraContentPlacesGet200ResponseAllOf {
    /**
     * 
     * @type {AraContentPlacesGet200ResponseAllOfData}
     * @memberof AraContentPlacesGet200ResponseAllOf
     */
    'data'?: AraContentPlacesGet200ResponseAllOfData;
}
/**
 * 
 * @export
 * @interface AraContentPlacesGet200ResponseAllOfData
 */
export interface AraContentPlacesGet200ResponseAllOfData {
    /**
     * 
     * @type {Array<Place>}
     * @memberof AraContentPlacesGet200ResponseAllOfData
     */
    'list'?: Array<Place>;
    /**
     * 
     * @type {string}
     * @memberof AraContentPlacesGet200ResponseAllOfData
     */
    'version'?: string;
}
/**
 * 
 * @export
 * @interface Channel
 */
export interface Channel {
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'website'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Channel
     */
    'secure'?: boolean;
    /**
     * 
     * @type {ChannelPlace}
     * @memberof Channel
     */
    'place'?: ChannelPlace;
    /**
     * 
     * @type {ChannelCountry}
     * @memberof Channel
     */
    'country'?: ChannelCountry;
}
/**
 * 
 * @export
 * @interface ChannelCountry
 */
export interface ChannelCountry {
    /**
     * 
     * @type {string}
     * @memberof ChannelCountry
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelCountry
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface ChannelPlace
 */
export interface ChannelPlace {
    /**
     * 
     * @type {string}
     * @memberof ChannelPlace
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelPlace
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface ChannelPlaceRef
 */
export interface ChannelPlaceRef {
    /**
     * 
     * @type {string}
     * @memberof ChannelPlaceRef
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelPlaceRef
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelPlaceRef
     */
    'subtitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelPlaceRef
     */
    'map'?: string;
}
/**
 * 
 * @export
 * @interface ChannelPlaceRefAllOf
 */
export interface ChannelPlaceRefAllOf {
    /**
     * 
     * @type {string}
     * @memberof ChannelPlaceRefAllOf
     */
    'subtitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelPlaceRefAllOf
     */
    'map'?: string;
}
/**
 * 
 * @export
 * @interface ChannelRef
 */
export interface ChannelRef {
    /**
     * 
     * @type {string}
     * @memberof ChannelRef
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelRef
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface ChannelRefs
 */
export interface ChannelRefs {
    /**
     * 
     * @type {string}
     * @memberof ChannelRefs
     */
    'itemsType'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelRefs
     */
    'type'?: string;
    /**
     * 
     * @type {Array<ChannelRef>}
     * @memberof ChannelRefs
     */
    'items'?: Array<ChannelRef>;
}
/**
 * 
 * @export
 * @interface Cities
 */
export interface Cities {
    /**
     * 
     * @type {string}
     * @memberof Cities
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Cities
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Cities
     */
    'rightAccessory'?: string;
    /**
     * 
     * @type {Array<LeftPageRef>}
     * @memberof Cities
     */
    'items'?: Array<LeftPageRef>;
}
/**
 * 
 * @export
 * @interface CountryPopularStations
 */
export interface CountryPopularStations {
    /**
     * 
     * @type {string}
     * @memberof CountryPopularStations
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryPopularStations
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryPopularStations
     */
    'itemsType'?: string;
    /**
     * 
     * @type {Array<CountryPopularStationsItemsInner>}
     * @memberof CountryPopularStations
     */
    'items'?: Array<CountryPopularStationsItemsInner>;
}
/**
 * @type CountryPopularStationsItemsInner
 * @export
 */
export type CountryPopularStationsItemsInner = ChannelPlaceRef | MoreRef;

/**
 * 
 * @export
 * @interface CountryRef
 */
export interface CountryRef {
    /**
     * 
     * @type {string}
     * @memberof CountryRef
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryRef
     */
    'url'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof CountryRef
     */
    'map'?: Array<number>;
}
/**
 * 
 * @export
 * @interface Geolocation
 */
export interface Geolocation {
    /**
     * 
     * @type {string}
     * @memberof Geolocation
     */
    'ip'?: string;
    /**
     * 
     * @type {string}
     * @memberof Geolocation
     */
    'country_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Geolocation
     */
    'country_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Geolocation
     */
    'region_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Geolocation
     */
    'region_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Geolocation
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof Geolocation
     */
    'zip_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Geolocation
     */
    'time_zone'?: string;
    /**
     * 
     * @type {number}
     * @memberof Geolocation
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof Geolocation
     */
    'longitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof Geolocation
     */
    'metro_code'?: number;
}
/**
 * 
 * @export
 * @interface LeftPageRef
 */
export interface LeftPageRef {
    /**
     * 
     * @type {string}
     * @memberof LeftPageRef
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof LeftPageRef
     */
    'leftAccessory'?: string;
    /**
     * 
     * @type {number}
     * @memberof LeftPageRef
     */
    'leftAccessoryCount'?: number;
    /**
     * 
     * @type {PlaceRef}
     * @memberof LeftPageRef
     */
    'page'?: PlaceRef;
}
/**
 * 
 * @export
 * @interface LocalPickStations
 */
export interface LocalPickStations {
    /**
     * 
     * @type {string}
     * @memberof LocalPickStations
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocalPickStations
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocalPickStations
     */
    'itemsType'?: string;
    /**
     * 
     * @type {Array<ChannelPlaceRef>}
     * @memberof LocalPickStations
     */
    'items'?: Array<ChannelPlaceRef>;
}
/**
 * 
 * @export
 * @interface LocalPopularStations
 */
export interface LocalPopularStations {
    /**
     * 
     * @type {PlaceRef}
     * @memberof LocalPopularStations
     */
    'actionPage'?: PlaceRef;
    /**
     * 
     * @type {string}
     * @memberof LocalPopularStations
     */
    'actionText'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocalPopularStations
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocalPopularStations
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocalPopularStations
     */
    'itemsType'?: string;
    /**
     * 
     * @type {Array<ChannelRef>}
     * @memberof LocalPopularStations
     */
    'items'?: Array<ChannelRef>;
}
/**
 * 
 * @export
 * @interface MoreRef
 */
export interface MoreRef {
    /**
     * 
     * @type {string}
     * @memberof MoreRef
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof MoreRef
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof MoreRef
     */
    'rightAccessory'?: string;
    /**
     * 
     * @type {MoreRefPage}
     * @memberof MoreRef
     */
    'page'?: MoreRefPage;
}
/**
 * @type MoreRefPage
 * @export
 */
export type MoreRefPage = CountryRef | PlaceRef;

/**
 * 
 * @export
 * @interface NearbyPlaces
 */
export interface NearbyPlaces {
    /**
     * 
     * @type {string}
     * @memberof NearbyPlaces
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof NearbyPlaces
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof NearbyPlaces
     */
    'rightAccessory'?: string;
    /**
     * 
     * @type {Array<RightPageRef>}
     * @memberof NearbyPlaces
     */
    'items'?: Array<RightPageRef>;
}
/**
 * 
 * @export
 * @interface Place
 */
export interface Place {
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    'id'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof Place
     */
    'geo'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    'url'?: string;
    /**
     * 
     * @type {number}
     * @memberof Place
     */
    'size'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Place
     */
    'boost'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    'country'?: string;
}
/**
 * 
 * @export
 * @interface PlaceContent
 */
export interface PlaceContent {
    /**
     * 
     * @type {Array<PlaceContentContentInner>}
     * @memberof PlaceContent
     */
    'content'?: Array<PlaceContentContentInner>;
}
/**
 * @type PlaceContentContentInner
 * @export
 */
export type PlaceContentContentInner = Cities | CountryPopularStations | LocalPickStations | LocalPopularStations | NearbyPlaces | SelectedStations;

/**
 * 
 * @export
 * @interface PlaceRef
 */
export interface PlaceRef {
    /**
     * 
     * @type {string}
     * @memberof PlaceRef
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaceRef
     */
    'subtitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaceRef
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaceRef
     */
    'map'?: string;
    /**
     * 
     * @type {number}
     * @memberof PlaceRef
     */
    'count'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlaceRef
     */
    'utcOffset'?: number;
}
/**
 * 
 * @export
 * @interface RightPageRef
 */
export interface RightPageRef {
    /**
     * 
     * @type {string}
     * @memberof RightPageRef
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof RightPageRef
     */
    'rightDetail'?: string;
    /**
     * 
     * @type {PlaceRef}
     * @memberof RightPageRef
     */
    'page'?: PlaceRef;
}
/**
 * 
 * @export
 * @interface SearchGet200Response
 */
export interface SearchGet200Response {
    /**
     * 
     * @type {number}
     * @memberof SearchGet200Response
     */
    'apiVersion'?: number;
    /**
     * 
     * @type {string}
     * @memberof SearchGet200Response
     */
    'version'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchGet200Response
     */
    'query'?: string;
    /**
     * 
     * @type {number}
     * @memberof SearchGet200Response
     */
    'took'?: number;
    /**
     * 
     * @type {SearchResultsHits}
     * @memberof SearchGet200Response
     */
    'hits'?: SearchResultsHits;
}
/**
 * 
 * @export
 * @interface SearchResult
 */
export interface SearchResult {
    /**
     * 
     * @type {string}
     * @memberof SearchResult
     */
    '_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof SearchResult
     */
    '_score'?: number;
    /**
     * 
     * @type {SearchResultSource}
     * @memberof SearchResult
     */
    '_source'?: SearchResultSource;
}
/**
 * 
 * @export
 * @interface SearchResultSource
 */
export interface SearchResultSource {
    /**
     * 
     * @type {string}
     * @memberof SearchResultSource
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchResultSource
     */
    'subtitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchResultSource
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchResultSource
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchResultSource
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface SearchResults
 */
export interface SearchResults {
    /**
     * 
     * @type {string}
     * @memberof SearchResults
     */
    'query'?: string;
    /**
     * 
     * @type {number}
     * @memberof SearchResults
     */
    'took'?: number;
    /**
     * 
     * @type {SearchResultsHits}
     * @memberof SearchResults
     */
    'hits'?: SearchResultsHits;
}
/**
 * 
 * @export
 * @interface SearchResultsHits
 */
export interface SearchResultsHits {
    /**
     * 
     * @type {Array<SearchResult>}
     * @memberof SearchResultsHits
     */
    'hits'?: Array<SearchResult>;
}
/**
 * 
 * @export
 * @interface SelectedStations
 */
export interface SelectedStations {
    /**
     * 
     * @type {string}
     * @memberof SelectedStations
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof SelectedStations
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof SelectedStations
     */
    'itemsType'?: string;
    /**
     * 
     * @type {Array<SelectedStationsItemsInner>}
     * @memberof SelectedStations
     */
    'items'?: Array<SelectedStationsItemsInner>;
}
/**
 * @type SelectedStationsItemsInner
 * @export
 */
export type SelectedStationsItemsInner = ChannelRef | MoreRef;

/**
 * 
 * @export
 * @interface Versioned
 */
export interface Versioned {
    /**
     * 
     * @type {number}
     * @memberof Versioned
     */
    'apiVersion'?: number;
    /**
     * 
     * @type {string}
     * @memberof Versioned
     */
    'version'?: string;
}

/**
 * ChannelsApi - axios parameter creator
 * @export
 */
export const ChannelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a radio station\'s details
         * @param {string} channelId ID of radio station to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        araContentChannelChannelIdGet: async (channelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('araContentChannelChannelIdGet', 'channelId', channelId)
            const localVarPath = `/ara/content/channel/{channelId}`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a radio station\'s live broadcast stream
         * @param {string} channelId ID of radio station to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        araContentListenChannelIdChannelMp3Get: async (channelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('araContentListenChannelIdChannelMp3Get', 'channelId', channelId)
            const localVarPath = `/ara/content/listen/{channelId}/channel.mp3`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a radio station\'s live broadcast stream
         * @param {string} channelId ID of radio station to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        araContentListenChannelIdChannelMp3Head: async (channelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('araContentListenChannelIdChannelMp3Head', 'channelId', channelId)
            const localVarPath = `/ara/content/listen/{channelId}/channel.mp3`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelsApi - functional programming interface
 * @export
 */
export const ChannelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChannelsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a radio station\'s details
         * @param {string} channelId ID of radio station to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async araContentChannelChannelIdGet(channelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AraContentChannelChannelIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.araContentChannelChannelIdGet(channelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a radio station\'s live broadcast stream
         * @param {string} channelId ID of radio station to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async araContentListenChannelIdChannelMp3Get(channelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.araContentListenChannelIdChannelMp3Get(channelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a radio station\'s live broadcast stream
         * @param {string} channelId ID of radio station to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async araContentListenChannelIdChannelMp3Head(channelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.araContentListenChannelIdChannelMp3Head(channelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChannelsApi - factory interface
 * @export
 */
export const ChannelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChannelsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a radio station\'s details
         * @param {string} channelId ID of radio station to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        araContentChannelChannelIdGet(channelId: string, options?: any): AxiosPromise<AraContentChannelChannelIdGet200Response> {
            return localVarFp.araContentChannelChannelIdGet(channelId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a radio station\'s live broadcast stream
         * @param {string} channelId ID of radio station to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        araContentListenChannelIdChannelMp3Get(channelId: string, options?: any): AxiosPromise<void> {
            return localVarFp.araContentListenChannelIdChannelMp3Get(channelId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a radio station\'s live broadcast stream
         * @param {string} channelId ID of radio station to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        araContentListenChannelIdChannelMp3Head(channelId: string, options?: any): AxiosPromise<void> {
            return localVarFp.araContentListenChannelIdChannelMp3Head(channelId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChannelsApi - object-oriented interface
 * @export
 * @class ChannelsApi
 * @extends {BaseAPI}
 */
export class ChannelsApi extends BaseAPI {
    /**
     * 
     * @summary Get a radio station\'s details
     * @param {string} channelId ID of radio station to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    public araContentChannelChannelIdGet(channelId: string, options?: AxiosRequestConfig) {
        return ChannelsApiFp(this.configuration).araContentChannelChannelIdGet(channelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a radio station\'s live broadcast stream
     * @param {string} channelId ID of radio station to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    public araContentListenChannelIdChannelMp3Get(channelId: string, options?: AxiosRequestConfig) {
        return ChannelsApiFp(this.configuration).araContentListenChannelIdChannelMp3Get(channelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a radio station\'s live broadcast stream
     * @param {string} channelId ID of radio station to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    public araContentListenChannelIdChannelMp3Head(channelId: string, options?: AxiosRequestConfig) {
        return ChannelsApiFp(this.configuration).araContentListenChannelIdChannelMp3Head(channelId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GeoApi - axios parameter creator
 * @export
 */
export const GeoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the client\'s geolocation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        geoGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/geo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeoApi - functional programming interface
 * @export
 */
export const GeoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the client\'s geolocation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async geoGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Geolocation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.geoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GeoApi - factory interface
 * @export
 */
export const GeoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeoApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the client\'s geolocation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        geoGet(options?: any): AxiosPromise<Geolocation> {
            return localVarFp.geoGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GeoApi - object-oriented interface
 * @export
 * @class GeoApi
 * @extends {BaseAPI}
 */
export class GeoApi extends BaseAPI {
    /**
     * 
     * @summary Get the client\'s geolocation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeoApi
     */
    public geoGet(options?: AxiosRequestConfig) {
        return GeoApiFp(this.configuration).geoGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PlacesApi - axios parameter creator
 * @export
 */
export const PlacesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a place\'s registered radio stations
         * @param {string} placeId ID of place to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        araContentPagePlaceIdChannelsGet: async (placeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'placeId' is not null or undefined
            assertParamExists('araContentPagePlaceIdChannelsGet', 'placeId', placeId)
            const localVarPath = `/ara/content/page/{placeId}/channels`
                .replace(`{${"placeId"}}`, encodeURIComponent(String(placeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a place\'s details
         * @param {string} placeId ID of place to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        araContentPagePlaceIdGet: async (placeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'placeId' is not null or undefined
            assertParamExists('araContentPagePlaceIdGet', 'placeId', placeId)
            const localVarPath = `/ara/content/page/{placeId}`
                .replace(`{${"placeId"}}`, encodeURIComponent(String(placeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get places with registered radio stations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        araContentPlacesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ara/content/places`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlacesApi - functional programming interface
 * @export
 */
export const PlacesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlacesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a place\'s registered radio stations
         * @param {string} placeId ID of place to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async araContentPagePlaceIdChannelsGet(placeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AraContentPagePlaceIdChannelsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.araContentPagePlaceIdChannelsGet(placeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a place\'s details
         * @param {string} placeId ID of place to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async araContentPagePlaceIdGet(placeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AraContentPagePlaceIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.araContentPagePlaceIdGet(placeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get places with registered radio stations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async araContentPlacesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AraContentPlacesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.araContentPlacesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlacesApi - factory interface
 * @export
 */
export const PlacesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlacesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a place\'s registered radio stations
         * @param {string} placeId ID of place to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        araContentPagePlaceIdChannelsGet(placeId: string, options?: any): AxiosPromise<AraContentPagePlaceIdChannelsGet200Response> {
            return localVarFp.araContentPagePlaceIdChannelsGet(placeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a place\'s details
         * @param {string} placeId ID of place to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        araContentPagePlaceIdGet(placeId: string, options?: any): AxiosPromise<AraContentPagePlaceIdGet200Response> {
            return localVarFp.araContentPagePlaceIdGet(placeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get places with registered radio stations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        araContentPlacesGet(options?: any): AxiosPromise<AraContentPlacesGet200Response> {
            return localVarFp.araContentPlacesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlacesApi - object-oriented interface
 * @export
 * @class PlacesApi
 * @extends {BaseAPI}
 */
export class PlacesApi extends BaseAPI {
    /**
     * 
     * @summary Get a place\'s registered radio stations
     * @param {string} placeId ID of place to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacesApi
     */
    public araContentPagePlaceIdChannelsGet(placeId: string, options?: AxiosRequestConfig) {
        return PlacesApiFp(this.configuration).araContentPagePlaceIdChannelsGet(placeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a place\'s details
     * @param {string} placeId ID of place to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacesApi
     */
    public araContentPagePlaceIdGet(placeId: string, options?: AxiosRequestConfig) {
        return PlacesApiFp(this.configuration).araContentPagePlaceIdGet(placeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get places with registered radio stations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacesApi
     */
    public araContentPlacesGet(options?: AxiosRequestConfig) {
        return PlacesApiFp(this.configuration).araContentPlacesGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Search for countries, places, and radio stations
         * @param {string} q Search query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGet: async (q: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('searchGet', 'q', q)
            const localVarPath = `/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Search for countries, places, and radio stations
         * @param {string} q Search query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchGet(q: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchGet(q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * 
         * @summary Search for countries, places, and radio stations
         * @param {string} q Search query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGet(q: string, options?: any): AxiosPromise<SearchGet200Response> {
            return localVarFp.searchGet(q, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * 
     * @summary Search for countries, places, and radio stations
     * @param {string} q Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchGet(q: string, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).searchGet(q, options).then((request) => request(this.axios, this.basePath));
    }
}


